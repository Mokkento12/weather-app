export type WeatherData = {
  city: string;
  temp: number;
  condition: string;
  humidity: number;
  icon: string;
};

// –ú–æ–∫–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –∏–º–∏—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –∏ API
export async function fetchWeather(city: string): Promise<WeatherData> {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // –ü—Ä–æ—Å—Ç–∞—è –º–æ–∫–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
  const mockData: Record<string, WeatherData> = {
    moscow: {
      city: "–ú–æ—Å–∫–≤–∞",
      temp: 18,
      condition: "–û–±–ª–∞—á–Ω–æ",
      humidity: 65,
      icon: "‚õÖ",
    },
    london: {
      city: "–õ–æ–Ω–¥–æ–Ω",
      temp: 12,
      condition: "–î–æ–∂–¥—å",
      humidity: 80,
      icon: "üåßÔ∏è",
    },
    tokyo: {
      city: "–¢–æ–∫–∏–æ",
      temp: 22,
      condition: "–°–æ–ª–Ω–µ—á–Ω–æ",
      humidity: 55,
      icon: "‚òÄÔ∏è",
    },
  };

  const data = mockData[city.toLowerCase()] || {
    city: city,
    temp: Math.floor(Math.random() * 30),
    condition: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    humidity: Math.floor(Math.random() * 100),
    icon: "‚ùì",
  };

  return data;
}

// –î–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
export async function fetchPopularCities(): Promise<string[]> {
  await new Promise((resolve) => setTimeout(resolve, 500));
  return ["moscow", "london", "tokyo", "paris", "new york"];
}
